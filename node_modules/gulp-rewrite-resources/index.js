var fs = require('fs');
var path = require('path');
var gulp = require('gulp');
var gutil = require('gulp-util');
var rename = require('gulp-rename');
var rewritecss = require('gulp-rewrite-css');
var through2 = require('through2');
var es = require('event-stream');
var crc = require('crc');
var url = require('url');
var assets = {};
var resources = [];

module.exports.resources = function (options) {
  options = options || {};
  options = {
    base: options.base || '',
    destination: options.destination || '',
    flatten: options.flatten || false
  };
  return es.map(function (file, callback) {
    if (file.isNull()) {
      callback(null, file);
      return;
    }
    var source = file.contents.toString();
    var checksum = crc.crc32(source).toString(16);
    var extname = path.extname(file.basename);
    var basename = path.basename(file.basename, extname);
    var outputFile = basename + '.' + checksum + extname;
    var sourceFile = path.relative(process.cwd(), file.path);
    resources.push({
      sourceFile: sourceFile,
      outputFile: path.join(options.base, options.destination, outputFile)
    });
    file.dirname = path.join(file.dirname, path.relative(file.dirname, file.base));
    file.basename = outputFile;
    file.path = path.join(file.dirname, file.basename);
    if (extname !== '.css') {
      callback(null, file);
      return;
    }
    gulp.src(sourceFile).pipe(rewritecss({
      destination: options.destination || process.cwd(),
      adaptPath: function (info) {
        var parsedUrl = url.parse(info.targetFile);
        var pathname = parsedUrl.pathname;
        var sourceFile = path.resolve(path.join(info.sourceDir, pathname));
        var extname = path.extname(sourceFile);
        var checksum = crc.crc32(fs.readFileSync(sourceFile)).toString(16);
        var outputFile = pathname.replace(extname, '.' + checksum + extname);
        // flatten output file ?
        if (options.flatten) {
          outputFile = path.basename(outputFile);
        }
        var assetUrl = path.join(options.destination, outputFile.replace(/^[\.\\\/]+/g, ''));
        assets[sourceFile] = path.join(options.base, assetUrl);
        return assetUrl;
      }
    })).pipe(es.map(function (stream) {
      file.contents = stream.contents;
      callback(null, file);
    }));
  });
};

module.exports.revisions = function () {
  return through2.obj(function (file, enc, callback) {
    for (var assetSource in assets) {
      this.push(new gutil.File({
        path: assets[assetSource],
        contents: new Buffer(fs.readFileSync(assetSource).toString())
      }));
    }
    var source = file.contents.toString();
    var sourceDir = path.relative(process.cwd(), path.dirname(file.path));
    for (var i = 0; i < resources.length; i++) {
      var sourceFileRelative = path.relative(sourceDir, resources[i].sourceFile);
      var sourceFileAbsolute = path.relative(process.cwd(), resources[i].sourceFile);
      var outputFile = resources[i].outputFile;
      source = source.replace(sourceFileAbsolute, outputFile);
      source = source.replace(sourceFileRelative, outputFile);
    }
    file.contents = new Buffer(source);
    this.push(file);
    callback();
  }, function (callback) {
    callback();
  });
};
